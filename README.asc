# Testowanie systemów wbudowanych

60 godzin, grupa laboratoryjna co najwyżej 18 osobowa

:numbered!:

## Sylabus

1. *Intel Galileo Workshop.*
  - Konfiguracja sprzętu i środowiska.
    Wgrywanie poprawnej wersji firmware.
    Sprawdzanie _getdeviceID_.
    Wykonywanie polecenia _ping_ do działających komponentów.
    _Sketches_ i przykłady kodu.

2. *Architektury systemów wbudowanych.*
  - Cykl rozwoju systemu wbudowanego.

3. *Konfiguracja środowiska testowego.*
  - https://github.com/projekty/syllabus-testowanie-systemow-wbudowanych/wiki/Słowniczek#build-system[Co to jest _build system_?]
    Dostarczanie _require info_.

3. *Testy manualne.*
  - https://github.com/projekty/syllabus-testowanie-systemow-wbudowanych/wiki/Słowniczek#exploratory-testing[Co to jest _exploratory testing_?]
    Wystawianie defektów.
    _Agile testing_.

4. *Specyfikacja testów.*
  - Określenie wymagań. Scenariusze testowe.
    Na co zwracać uwagę pisząc specyfikację testu.

5. *Testy automatyczne.*
  - Automatyzacja procesu testowego.
    Integracja skryptów i raportowanie wyników.
    Metryki jakości oprogramowania.

6. *Raportowanie defektów.*
  - Wykorzystanie Bugzilli/repozytoriów GitHub do
    ustalania wspólnej listy defektów.
    Podział defektów między programistów.
    Co to jest _bug scrubbing_? (Jest to proces/spotkanie, w czasie ktorego spotykaja sie osoby zaangazowane w projekt i
    przegladaja defekty zgloszone w czasie testow. Defekt po defekcie nastepuje ich analiza i mozliwe jest kilka krokow:
    - jesli opis jest niezrozumialy niewystarczajacy, brakuje jakichs logów etc - jest prosba o _require info_ czyli o uzupelnienie danych
    - jesli po opisie widac ze zachowanie jest poprawne (tester popelnil blad i np zle odczytal dokumentacje) mozemy zdecydowac o zamknieciu defektu (jako _not a defect_)
    - jesli informacja jest kompletna i widac ze jest to defekt to przyporzadkowujemy osobe, ktora bedzie naprawiac defekt w kodzie
    Tworzenie _BVT_.
    BVT (Build Verification Tests czasem nazywane BAT - build acceptance tests: http://www.softwaretestinghelp.com/bvt-build-verification-testing-process/) to niezwykle istotny element procesu.
    W jego sklad wchodza testy automatyczne ktore weryfikuja czy dany build firmware'u spelnia podstawowe wymagania jakosciowe.
    Testy BVT musza spelniac pare warunkow:
    - automatyczne
    - 100 % pass aby uznac ze build jest poprawny
    - komplet testów powinien trwac stosunkowo krotko (na potrzeby laboratorium mysle, że krotko mozna zdefiniowac jako <1 minuty)

8. *Debugowanie i zarządzanie zmianami w kodzie.*
  - Testy regresyjne i integracyjne.
    Implementacja testów dla nowych funkcji firmware.
