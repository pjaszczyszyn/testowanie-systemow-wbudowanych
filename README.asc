# Testowanie systemów wbudowanych

60 godzin, grupa laboratoryjna co najwyżej 18 osobowa

:numbered!:

## Sylabus

1. *Intel Galileo Workshop.*
  - Konfiguracja sprzętu i środowiska.
    Wgrywanie poprawnej wersji firmware.
    Sprawdzanie _getdeviceID_.
    Wykonywanie polecenia _ping_ do działających komponentów.
    _Sketches_ i przykłady kodu.

2. *Architektury systemów wbudowanych.*
  - Cykl rozwoju systemu wbudowanego.

3. *Testy manualne.*
  - Co to jest _exploratory testing_? (chodzi o testy eksploracyjne http://en.wikipedia.org/wiki/Exploratory_testing, 
  czyli w duzym skrócie probujemy poznac system w ktorym dzialamy, wczuwamy sie w uzytkownika ktory nie wie jak dziala system
  i próbuje go rozpracowac jednoczesnie znajdujac defekty)
    Wystawianie defektów.
    _Agile testing_.

4. *Specyfikacja testów.*
  - Określenie wymagań. Scenariusze testowe.
    Na co zwracać uwagę pisząc specyfikację testu.

5. *Testy automatyczne.*
  - Automatyzacja procesu testowego.
    Integracja skryptów i raportowanie wyników.
    Metryki jakości oprogramowania.

6. *Raportowanie defektów.*
  - Wykorzystanie Bugzilli/repozytoriów GitHub do
    ustalania wspólnej listy defektów.
    Podział defektów między programistów.
    Co to jest _bug scrubbing_? (Jest to proces/spotkanie, w czasie ktorego spotykaja sie osoby zaangazowane w projekt i 
    przegladaja defekty zgloszone w czasie testow. Defekt po defekcie nastepuje ich analiza i mozliwe jest kilka krokow:
    - jesli opis jest niezrozumialy niewystarczajacy, brakuje jakichs logów etc - jest prosba o _require info_ czyli o uzupelnienie danych
    - jesli po opisie widac ze zachowanie jest poprawne (tester popelnil blad i np zle odczytal dokumentacje) mozemy zdecydowac o zamknieciu defektu (jako _not a defect_)
    - jesli informacja jest kompletna i widac ze jest to defekt to przyporzadkowujemy osobe, ktora bedzie naprawiac defekt w kodzie
    Tworzenie _BVT_.
    BVT (Build Verification Tests czasem nazywane BAT - build acceptance tests: http://www.softwaretestinghelp.com/bvt-build-verification-testing-process/) to niezwykle istotny element procesu. 
    W jego sklad wchodza testy automatyczne ktore weryfikuja czy dany build firmware'u spelnia podstawowe wymagania jakosciowe.
    Testy BVT musza spelniac pare warunkow:
    - automatyczne
    - 100 % pass aby uznac ze build jest poprawny
    - komplet testów powinien trwac stosunkowo krotko (na potrzeby laboratorium mysle, że krotko mozna zdefiniowac jako <1 minuty)

7. *Konfiguracja środowiska testowego.*
ta laborke ustawilbym jako laborke numer 2. W slowniczku troche szczegolow, ale glownie chodzi o to zeby zanim zaczniemy testowac to upewnic sie ze srodowisko ktore bedziemy uzywac i cala konfiguracja dziala poprawnie. W przeciwnym wypadku bedziemy wykrywac bledy (np komunikacja nie dziala) a wina bedzie lezec po stronie srodowiska a nie galileo. Trzeba pamietac o zasadzie z miernictwa: urzadzenie ktorym mierzymy musi byc o rzad wielkosci dokladniejsze od mierzonego obiektu. u nas srodowisko testowe musi byc wyzszej jakosci niz testowany produkt !
  - Co to jest _build system_?
    Dostarczanie _require info_.

8. *Debugowanie i zarządzanie zmianami w kodzie.*
  - Testy regresyjne i integracyjne.
    Implementacja testów dla nowych funkcji firmware.


## Prework

Ad. 1. Zapoznanie z dokumentami opisującymi
jak zestawić Galileo.

- _Podać linki do filmów na YouTube._
- http://www.intel.com/support/galileo/sb/CS-035160.htm:[Sketches and code examples]

Ad. 2. Zapoznanie się z metodami raportowania defektów na
Bugzilla/GitHub.

Ad. 3. Uzupełnianie przykładowych test spec
i napisanie kilku nowych test spec.

Ad. 4. Zapoznanie się ze środowiskiem testowym.
Przygotowanie skryptów na podstawie test spec.


## Zależności

Ad. 1. Specyfikacja produktu. Specyfikacje Galileo
i Sensorów. Interfejsy komunikacji.

Ad. 2. Wymagania. Przykładowy test spec.
Bugzilla/GitHub.

Ad. 3. Test spec wybranej funkcjonalności.
Przykładowe specyfikacje testów.
Wykonanie i raportowanie wyników testów.

Ad. 4. Środowisko testowe. Przykładowe testy.
Repozytoria z testami. Testowanie zdalne (_remote testing_).
mysle ze idea remote testing powinna byc idea przewodnia dla calej laborki. systemy powinny byc dostepne caly czas online i studenci pracuja w domu a czas laborki jest momentem konsultacji z prowadzacym i wykonaniem rzeczy ktore wymagaja ich obecnosci (np podlaczenia kabli :) )
